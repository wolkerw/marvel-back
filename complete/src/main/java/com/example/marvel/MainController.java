package com.example.marvel;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.bind.annotation.CrossOrigin;

@Controller // This means that this class is a Controller
// @RequestMapping(path="/marvel") // This means URL's start with /marvel (after
// Application path)
@CrossOrigin(origins = { "http://localhost:8080", "http://localhost:3000" })
public class MainController {
	/*
	 * @Autowired // This means to get the bean called userRepository // Which is
	 * auto-generated by Spring, we will use it to handle the data private
	 * UserRepository userRepository;
	 */
	@Autowired
	private MarvelRepository marvelRepository;
	/*
	 * @Autowired private MarvelRepository marvelRepository;
	 */

	private final RestTemplate restTemplate;
	private static final Logger log = LoggerFactory.getLogger(MainController.class);
	private final String publicKey = "270ff4d25823b87e94d50bcc9f197996";
	private final String privateKey = "cd2f995172c3bb030fdc24d79e2377a50e17f924";

	public MainController(RestTemplateBuilder restTemplateBuilder) {
		this.restTemplate = restTemplateBuilder.build();
	}

	@GetMapping(path = "/heroes/stories")
	public @ResponseBody Quote getHeroesStories(@RequestParam Integer characterId) {
		java.util.Date today = new java.util.Date();
		java.sql.Timestamp ts1 = new java.sql.Timestamp(today.getTime());
		long timestamp = ts1.getTime();
		String timestampStr = Long.toString(timestamp);

		String hashString = timestampStr + privateKey + publicKey;
		log.info(hashString);

		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("MD5");
			
		}
		catch (NoSuchAlgorithmException e) {
			System.err.println("I'm sorry, but MD5 is not a valid message digest algorithm");
		}
		
		byte[] hashInBytes = md.digest(hashString.getBytes(StandardCharsets.UTF_8));
        StringBuilder sb = new StringBuilder();
        for (byte b : hashInBytes) {
            sb.append(String.format("%02x", b));
        }

		Map<String, String> vars = new HashMap<>();
		vars.put("characterId", characterId.toString());
		vars.put("timestampStr", timestampStr);
		vars.put("hash", sb.toString());
		vars.put("apiKey", publicKey);

		return this.restTemplate.getForObject("http://gateway.marvel.com/v1/public/characters/{characterId}/stories?limit=5&ts={timestampStr}&apikey={apiKey}&hash={hash}", Quote.class, vars);
	}

	@GetMapping(path = "/hero/id")
	public @ResponseBody Quote getHeroId(@RequestParam String characterName) {
		java.util.Date today = new java.util.Date();
		java.sql.Timestamp ts1 = new java.sql.Timestamp(today.getTime());
		long timestamp = ts1.getTime();
		String timestampStr = Long.toString(timestamp);

		String hashString = timestampStr + privateKey + publicKey;
		log.info(hashString);

		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("MD5");
			
		}
		catch (NoSuchAlgorithmException e) {
			System.err.println("I'm sorry, but MD5 is not a valid message digest algorithm");
		}
		
		byte[] hashInBytes = md.digest(hashString.getBytes(StandardCharsets.UTF_8));
        StringBuilder sb = new StringBuilder();
        for (byte b : hashInBytes) {
            sb.append(String.format("%02x", b));
        }

		Map<String, String> vars = new HashMap<>();
		vars.put("characterName", characterName);
		vars.put("timestampStr", timestampStr);
		vars.put("hash", sb.toString());
		vars.put("apiKey", publicKey);

		return this.restTemplate.getForObject("https://gateway.marvel.com/v1/public/characters?ts=1570805269&apikey=270ff4d25823b87e94d50bcc9f197996&hash=f0bff4e5f6dbfce6286cb36a986e6527&name={characterName}&limit=1", Quote.class, characterName);
	}
}
